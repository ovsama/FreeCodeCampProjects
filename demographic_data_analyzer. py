import pandas as pd


def calculate_demographic_data(print_data=True):
    # Read data from file
    df = pd.read_csv('adult.data.csv') 

    # How many of each race are represented in this dataset? This should be a Pandas series with race names as the index labels.
    race_count = df['race'].value_counts()

    # What is the average age of men?
    average_age_men = round((df[df['sex'] == 'Male'].mean())[0],1)

    # What is the percentage of people who have a Bachelor's degree?
    percentage_bachelors = round(((df['education'].value_counts() / df['education'].value_counts().sum()) * 100)[2],1)

    # What percentage of people with advanced education (`Bachelors`, `Masters`, or `Doctorate`) make more than 50K?
    # What percentage of people without advanced education make more than 50K?

    # with and without `Bachelors`, `Masters`, or `Doctorate`
    higher_education = df['education'].loc[df['education'].isin(['Bachelors', 'Masters','Doctorate'])] 
  
    lower_education = df['education'].loc[~df['education'].isin(['Bachelors', 'Masters','Doctorate'])]

    # percentage with salary >50K
    higher_education_rich = round(((higher_education[df['salary'] == '>50K'].value_counts().sum()/ higher_education .value_counts().sum())* 100),1)
  
    lower_education_rich = round((lower_education[df['salary'] == '>50K'].value_counts().sum()/lower_education.value_counts().sum())*100,1)

    # What is the minimum number of hours a person works per week (hours-per-week feature)?
    min_work_hours = df['hours-per-week'].min()

    # What percentage of the people who work the minimum number of hours per week have a salary of >50K?
    num_min_workers = len(df[df['hours-per-week'] == 1])


     people_who_work_fewest_hours = df[df['hours-per-week'] == 1]

     len(people_who_work_fewest_hours)

     rich_people_who_work_fewest_hours = people_who_work_fewest_hours[people_who_work_fewest_hours['salary'].str.contains(">")]

     len(rich_people_who_work_fewest_hours)

     rich_percentage = (len(rich_people_who_work_fewest_hours))*100 / len(people_who_work_fewest_hours)

     
    # What country has the highest percentage of people that earn >50K?
      high_income = df[df["salary"].str.contains(">")]
      high_income = high_income["native-country"].value_counts().sort_index(ascending=True).to_frame()

      low_income = df[df["salary"].str.contains("<")]
      low_income["native-country"]
      low_income = low_income["native-country"].value_counts().sort_index(ascending=True).to_frame()

      total = high_income.add(low_income, fill_value=0)    

      op1 = high_income*100
      op2 = op1.div(total)

       countries_with_percent_high_salary = op2.sort_values(by='native-country', ascending=False)

       highest_earning_country = countries_with_percent_high_salary.index[0]
     
       highest_earning_country_percentage = round(countries_with_percent_high_salary.max(),1)

    # Identify the most popular occupation for those who earn >50K in India.

      a = df[["salary","occupation", "native-country"]]
      b = a[a["salary"].str.contains(">")]
      c = b[b["native-country"].str.contains("India")]
      d = c.value_counts()
      top_IN_occupation = d.index[0]



    if print_data:
        print("Number of each race:\n", race_count) 
        print("Average age of men:", average_age_men)
        print(f"Percentage with Bachelors degrees: {percentage_bachelors}%")
        print(f"Percentage with higher education that earn >50K: {higher_education_rich}%")
        print(f"Percentage without higher education that earn >50K: {lower_education_rich}%")
        print(f"Min work time: {min_work_hours} hours/week")
        print(f"Percentage of rich among those who work fewest hours: {rich_percentage}%")
        print("Country with highest percentage of rich:", highest_earning_country)
        print(f"Highest percentage of rich people in country: {highest_earning_country_percentage}%")
        print("Top occupations in India:", top_IN_occupation)

    return {
        'race_count': race_count,
        'average_age_men': average_age_men,
        'percentage_bachelors': percentage_bachelors,
        'higher_education_rich': higher_education_rich,
        'lower_education_rich': lower_education_rich,
        'min_work_hours': min_work_hours,
        'rich_percentage': rich_percentage,
        'highest_earning_country': highest_earning_country,
        'highest_earning_country_percentage':
        highest_earning_country_percentage,
        'top_IN_occupation': top_IN_occupation
    }

